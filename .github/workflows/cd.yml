name: CD - Deploy Iris API to GKE

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Authenticate with GCP
      - name: Authenticate to Google Cloud
        env:
          GCP_B64: ${{ secrets.GCP_KEY_JSON }}
        run: |
          set -e
          echo "$GCP_B64" | base64 -d > gcp-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json" >> $GITHUB_ENV
          export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json
          
          echo "✓ Decoded service account key"
          python3 -m json.tool gcp-key.json > /dev/null && echo "✓ Valid JSON"
          echo "Installing Google Cloud CLI..."
          sudo apt-get update && sudo apt-get install -y google-cloud-cli
          
          echo "Authenticating with GCP..."
          gcloud auth activate-service-account --key-file=gcp-key.json
          
          # Set up application default credentials correctly
          echo "Setting up application default credentials..."
          gcloud auth application-default print-access-token > /dev/null 2>&1 || \
          GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json gcloud auth application-default login --no-launch-browser --quiet || true

      # 3. Setup gcloud CLI
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: logical-river-338214
          install_components: 'kubectl'
      - name: Download model from GCS
        run: |
          gsutil cp gs://mlops-course-803234401672-week1/my-models/iris-classifier-week-1/model.joblib ./model.joblib
      # 4. Configure Docker to use Artifact Registry
      - name: Configure Docker
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      # 5. Build and push Docker image
      - name: Build and push Docker image
        run: |
          IMAGE=us-central1-docker.pkg.dev/logical-river-338214/my-repo/iris-api:latest
          docker build -t $IMAGE .
          docker push $IMAGE
      # 6. Get GKE credentials
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials gke-cluster-k8s-mlops --zone us-central1 --project logical-river-338214
      - name: Verify GKE cluster access
        run: |
          kubectl cluster-info
          kubectl get nodes
      # 7. Deploy to Kubernetes
      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
      - name: Wait for Pod Ready, External IP and Test API
        run: |
          echo "Waiting for Pod to become Ready..."
          for i in {1..30}; do
            POD_STATUS=$(kubectl get pods -l app=iris-api -o jsonpath='{.items[0].status.containerStatuses[0].ready}' 2>/dev/null || echo "false")
            if [ "$POD_STATUS" == "true" ]; then
              echo "Pod is Ready!"
              break
            fi
            echo "Pod not ready yet... ($i/30)"
            sleep 10
          done

          echo "Waiting for External IP..."
          for i in {1..60}; do
            EXTERNAL_IP=$(kubectl get svc iris-api-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [ -n "$EXTERNAL_IP" ]; then
              echo "External IP acquired: $EXTERNAL_IP"
              break
            fi
            echo "Still waiting for External IP... ($i/60)"
            sleep 10
          done

          if [ -z "$EXTERNAL_IP" ]; then
            echo "❌ Failed to get External IP after 5 minutes"
            exit 1
          fi

          echo "Testing GET endpoint..."
          curl -f "http://$EXTERNAL_IP/" || exit 1

          echo "Testing POST /predict/ endpoint..."
          curl -X POST "http://$EXTERNAL_IP/predict/" \
            -H "Content-Type: application/json" \
            -d '{"sepal_length": 5.1, "sepal_width": 3.5, "petal_length": 1.4, "petal_width": 0.2}'
